{"version":3,"sources":["../src/index.js"],"names":["svgo","fs","promisifyAll","require","glob","promisify","input","output","template","component","camelCaps","str","split","map","s","substring","toUpperCase","length","join","matches","all","match","basename","readFileAsync","name","content","files","resolve","reject","optimize","result","data","svg","addStyleJSXAttribute","jsx","jsSVG","programs","fileName","writeFileAsync","console","error","styledSVG","propValue","attrs","style","value","prefix","local","type","fill"],"mappings":"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","file":"index.js","sourcesContent":["import 'babel-polyfill';\n\nimport path from 'path';\nimport SVGO from 'svgo';\nimport Promise from 'bluebird';\nimport svg2js from 'svgo/lib/svgo/svg2js';\nimport js2svg from './js2svg';\n\nconst svgo = new SVGO();\nconst fs = Promise.promisifyAll(require('fs'));\nconst glob = Promise.promisify(require('glob'));\n\nexport default async (input, output, template, component) => {\n  const camelCaps = (str) => str.split('-')\n    .map((s) => s.substring(0, 1).toUpperCase() + s.substring(1, s.length))\n    .join('');\n\n  try {\n    const matches = await glob(input);\n    const files = await Promise.all(matches.map(async (match) => ({\n      name: camelCaps(path.basename(match)),\n      content: await fs.readFileAsync(match, 'utf-8')\n    })));\n\n    const svg = await Promise.all(files.map(\n      ({ name, content }) => new Promise((resolve, reject) => {\n        svgo.optimize(content,\n          (result) => resolve({ name, content: result.data }));\n    })));\n\n    const jsx = await Promise.all(\n      svg.map(({ name, content }) => new Promise((resolve, reject) => {\n        svg2js(content, (result) => resolve({\n          name,\n          content: addStyleJSXAttribute(result, component)\n        }));\n      })));\n\n    const jsSVG = jsx.map(\n      ({ name, content }) => ({ name, content: js2svg(content).data }));\n\n    const programs = jsSVG.map(({ name, content }) => ({\n      name,\n      content: template(name.split('.')[0], content)\n    }));\n\n    for (const { name, content } of programs) {\n      const fileName = name.split('.')[0] + '.js';\n\n      await fs.writeFileAsync(path.resolve(output, fileName), content);\n    }\n  } catch (e) {\n    console.error(e);\n  }\n}\n\nfunction addStyleJSXAttribute(svg, component) {\n  const styledSVG = { ...svg };\n  const propValue = component ? 'this.props' : 'props';\n\n  styledSVG.content[0].attrs = { ...svg.content[0].attrs,\n    style: {\n      name: propValue,\n      value: '',\n      prefix: '',\n      local: '',\n      type: 'JSX'\n    }\n  };\n\n  if (\n    styledSVG.content[0].content &&\n    styledSVG.content[0].content[1] &&\n    styledSVG.content[0].content[1].attrs &&\n    styledSVG.content[0].content[1].attrs.fill\n  ) {\n    delete styledSVG.content[0].content[1].attrs.fill\n  }\n\n  return styledSVG;\n}\n"]}